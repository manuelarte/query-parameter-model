import io.github.manuelarte.spring.ProjectVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "nebula.facet" version "7.0.8"
    id 'com.palantir.git-version' version '0.12.3'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.2'
    id "com.jfrog.bintray" version "1.8.5"
}

apply plugin: 'com.bmuschko.nexus'

ext.versionFile = file('version.properties')
ext.gitDetails = versionDetails()

ProjectVersion readVersion() {
    logger.quiet 'Reading version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream -> versionProps.load(stream) }
    def release = Boolean.FALSE
    if (versionProps.release != null) {
        release = versionProps.release.toBoolean()
    } else {
        if (gitDetails.branchName == 'master') {
            release = Boolean.TRUE
        }
    }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(),
            versionProps.bugFix.toInteger(), release)
}

group = 'io.github.manuelarte.spring'
version = readVersion()
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://repo.spring.io/milestone' }
}

facets {
    integrationTest {
        parentSourceSet = 'main'
        testTaskName = 'integrationTest'
        includeInCheckLifecycle = true
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation 'com.google.guava:guava:28.2-jre'
    compileOnly 'org.springframework.boot:spring-boot-starter:2.2.6.RELEASE'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.1'
    testImplementation 'org.json:json:20190722'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.2.0'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.13'
    testImplementation 'org.mutabilitydetector:MutabilityDetector:0.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test:2.2.6.RELEASE') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.2.6.RELEASE'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-web:2.2.6.RELEASE'
    integrationTestRuntime 'com.h2database:h2:1.4.200'
}

test {
    useJUnitPlatform()
}

integrationTest {
    useJUnitPlatform()
}

jar {
    enabled = true
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId rootProject.name
            pom {
                name = 'Query Parameter Library'
                description = 'Library to use query parameter'
                url = 'http://www.example.com/library'
                developers {
                    developer {
                        id = 'manuelarte'
                        name = 'Manuel Doncel Martos'
                        email = 'manueldoncelmartos@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/manuelarte/query-parameter-model'
                }
            }
        }
    }
}

modifyPom {
    project {
        name rootProject.name
        description 'Query Parameter Model.'
        url 'https://github.com/manuelarte/query-parameter-model'
        inceptionYear '2020'

        scm {
            url 'https://github.com/manuelarte/query-parameter-model'
            connection 'scm:https://github.com/manuelarte/query-parameter-model.git'
            developerConnection 'scm:https://github.com/manuelarte/query-parameter-model.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'manuelarte'
                name 'Manuel Doncel Martos'
                email 'manueldoncelmartos@gmail.com'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = false
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "io.github.manuelarte.spring" //optional if packageGroup == project.getGroup()
    // stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}